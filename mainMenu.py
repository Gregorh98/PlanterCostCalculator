#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 04, 2020 04:54:27 PM BST  platform: Windows NT

import sys, json

try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk

try:
	import ttk
	py3 = False
except ImportError:
	import tkinter.ttk as ttk
	py3 = True

import mainMenu_support, planters, functions
from tkinter import messagebox

def vp_start_gui():
	'''Starting point when module is the main routine.'''
	global val, w, root
	root = tk.Tk()
	top = topLevel (root)
	mainMenu_support.init(root, top)
	root.mainloop()

w = None
def create_topLevel(root, *args, **kwargs):
	'''Starting point when module is imported by another program.'''
	global w, w_win, rt
	rt = root
	w = tk.Toplevel (root)
	top = topLevel (w)
	mainMenu_support.init(w, top, *args, **kwargs)
	return (w, top)

def destroy_topLevel():
	global w
	w.destroy()
	w = None

class topLevel:
	def __init__(self, top=None):
		'''This class configures and populates the toplevel window.
		   top is the toplevel containing window.'''
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'
		
		self.order = []
		with open("settings.json", "r") as f:
			self.settings = json.loads(f.read()) 
		

		top.geometry("559x233+700+220")
		top.title("Planter Order Calculator")
		top.configure(background="#d9d9d9")
		top.configure(highlightbackground="#d9d9d9")
		top.configure(highlightcolor="black")
		top.resizable(False, False)

		self.editOrderFrame = tk.LabelFrame(top)
		self.editOrderFrame.place(relx=0.018, rely=0.043, relheight=0.494, relwidth=0.268)
		self.editOrderFrame.configure(relief='groove')
		self.editOrderFrame.configure(foreground="black")
		self.editOrderFrame.configure(text='''Edit Order''')
		self.editOrderFrame.configure(background="#d9d9d9")
		self.editOrderFrame.configure(highlightbackground="#d9d9d9")
		self.editOrderFrame.configure(highlightcolor="black")
		self.editOrderFrame.configure(width=150)

		self.addPlanterButton = tk.Button(self.editOrderFrame)
		self.addPlanterButton.place(relx=0.067, rely=0.174, height=24, width=127, bordermode='ignore')
		self.addPlanterButton.configure(activebackground="#ececec")
		self.addPlanterButton.configure(activeforeground="#000000")
		self.addPlanterButton.configure(background="#d9d9d9")
		self.addPlanterButton.configure(disabledforeground="#a3a3a3")
		self.addPlanterButton.configure(foreground="#000000")
		self.addPlanterButton.configure(highlightbackground="#d9d9d9")
		self.addPlanterButton.configure(highlightcolor="black")
		self.addPlanterButton.configure(pady="0")
		self.addPlanterButton.configure(text='''Add''')
		self.addPlanterButton.configure(command=self.showAddPlanterScreen)

		self.removePlanterButton = tk.Button(self.editOrderFrame)
		self.removePlanterButton.place(relx=0.067, rely=0.435, height=24, width=127, bordermode='ignore')
		self.removePlanterButton.configure(activebackground="#ececec")
		self.removePlanterButton.configure(activeforeground="#000000")
		self.removePlanterButton.configure(background="#d9d9d9")
		self.removePlanterButton.configure(disabledforeground="#a3a3a3")
		self.removePlanterButton.configure(foreground="#000000")
		self.removePlanterButton.configure(highlightbackground="#d9d9d9")
		self.removePlanterButton.configure(highlightcolor="black")
		self.removePlanterButton.configure(pady="0")
		self.removePlanterButton.configure(text='''Remove''')
		self.removePlanterButton.configure(command=self.removePlanter)

		self.editPlanterButton = tk.Button(self.editOrderFrame)
		self.editPlanterButton.place(relx=0.067, rely=0.696, height=24, width=127, bordermode='ignore')
		self.editPlanterButton.configure(activebackground="#ececec")
		self.editPlanterButton.configure(activeforeground="#000000")
		self.editPlanterButton.configure(background="#d9d9d9")
		self.editPlanterButton.configure(disabledforeground="#a3a3a3")
		self.editPlanterButton.configure(foreground="#000000")
		self.editPlanterButton.configure(highlightbackground="#d9d9d9")
		self.editPlanterButton.configure(highlightcolor="black")
		self.editPlanterButton.configure(pady="0")
		self.editPlanterButton.configure(text='''Edit''')
		self.editPlanterButton.configure(command=self.showEditPlanterScreen)

		self.menuFrame = tk.LabelFrame(top)
		self.menuFrame.place(relx=0.018, rely=0.558, relheight=0.408, relwidth=0.268)
		self.menuFrame.configure(relief='groove')
		self.menuFrame.configure(foreground="black")
		self.menuFrame.configure(text='''Menu''')
		self.menuFrame.configure(background="#d9d9d9")
		self.menuFrame.configure(highlightbackground="#d9d9d9")
		self.menuFrame.configure(highlightcolor="black")
		self.menuFrame.configure(width=150)

		self.newPlanterOrderButton = tk.Button(self.menuFrame)
		self.newPlanterOrderButton.place(relx=0.067, rely=0.211, height=24, width=127, bordermode='ignore')
		self.newPlanterOrderButton.configure(activebackground="#ececec")
		self.newPlanterOrderButton.configure(activeforeground="#000000")
		self.newPlanterOrderButton.configure(background="#d9d9d9")
		self.newPlanterOrderButton.configure(disabledforeground="#a3a3a3")
		self.newPlanterOrderButton.configure(foreground="#000000")
		self.newPlanterOrderButton.configure(highlightbackground="#d9d9d9")
		self.newPlanterOrderButton.configure(highlightcolor="black")
		self.newPlanterOrderButton.configure(pady="0")
		self.newPlanterOrderButton.configure(text='''New Order''')
		self.newPlanterOrderButton.configure(command=self.newOrder)

		self.quitButton = tk.Button(self.menuFrame)
		self.quitButton.place(relx=0.067, rely=0.632, height=24, width=127, bordermode='ignore')
		self.quitButton.configure(activebackground="#ececec")
		self.quitButton.configure(activeforeground="#000000")
		self.quitButton.configure(background="#d9d9d9")
		self.quitButton.configure(disabledforeground="#a3a3a3")
		self.quitButton.configure(foreground="#000000")
		self.quitButton.configure(highlightbackground="#d9d9d9")
		self.quitButton.configure(highlightcolor="black")
		self.quitButton.configure(pady="0")
		self.quitButton.configure(text='''Quit''')
		self.quitButton.configure(command=self.quit)
		
		self.orderFrame = tk.LabelFrame(top)
		self.orderFrame.place(relx=0.304, rely=0.043, relheight=0.923, relwidth=0.394)
		self.orderFrame.configure(relief='groove')
		self.orderFrame.configure(foreground="black")
		self.orderFrame.configure(text='''Current Order''')
		self.orderFrame.configure(background="#d9d9d9")
		self.orderFrame.configure(highlightbackground="#d9d9d9")
		self.orderFrame.configure(highlightcolor="black")
		self.orderFrame.configure(width=220)

		self.orderListbox = tk.Listbox(self.orderFrame)
		self.orderListbox.place(relx=0.045, rely=0.093, relheight=0.847, relwidth=0.882, bordermode='ignore')
		self.orderListbox.configure(background="white")
		self.orderListbox.configure(disabledforeground="#a3a3a3")
		self.orderListbox.configure(font="TkFixedFont")
		self.orderListbox.configure(foreground="#000000")
		self.orderListbox.configure(highlightbackground="#d9d9d9")
		self.orderListbox.configure(highlightcolor="black")
		self.orderListbox.configure(selectbackground="#c4c4c4")
		self.orderListbox.configure(selectforeground="black")
		self.orderListbox.configure(width=194)

		self.calculationsFrame = tk.LabelFrame(top)
		self.calculationsFrame.place(relx=0.716, rely=0.043, relheight=0.408, relwidth=0.268)
		self.calculationsFrame.configure(relief='groove')
		self.calculationsFrame.configure(foreground="black")
		self.calculationsFrame.configure(text='''Calculate''')
		self.calculationsFrame.configure(background="#d9d9d9")
		self.calculationsFrame.configure(highlightbackground="#d9d9d9")
		self.calculationsFrame.configure(highlightcolor="black")
		self.calculationsFrame.configure(width=150)

		self.calculatePriceButton = tk.Button(self.calculationsFrame)
		self.calculatePriceButton.place(relx=0.067, rely=0.316, height=24, width=127, bordermode='ignore')
		self.calculatePriceButton.configure(activebackground="#ececec")
		self.calculatePriceButton.configure(activeforeground="#000000")
		self.calculatePriceButton.configure(background="#d9d9d9")
		self.calculatePriceButton.configure(disabledforeground="#a3a3a3")
		self.calculatePriceButton.configure(foreground="#000000")
		self.calculatePriceButton.configure(highlightbackground="#d9d9d9")
		self.calculatePriceButton.configure(highlightcolor="black")
		self.calculatePriceButton.configure(pady="0")
		self.calculatePriceButton.configure(text='''Calculate Price''')
		self.calculatePriceButton.configure(command=self.showCostScreen)

		self.calculateBuildButton = tk.Button(self.calculationsFrame)
		self.calculateBuildButton.place(relx=0.067, rely=0.632, height=24, width=127, bordermode='ignore')
		self.calculateBuildButton.configure(activebackground="#ececec")
		self.calculateBuildButton.configure(activeforeground="#000000")
		self.calculateBuildButton.configure(background="#d9d9d9")
		self.calculateBuildButton.configure(disabledforeground="#a3a3a3")
		self.calculateBuildButton.configure(foreground="#000000")
		self.calculateBuildButton.configure(highlightbackground="#d9d9d9")
		self.calculateBuildButton.configure(highlightcolor="black")
		self.calculateBuildButton.configure(pady="0")
		self.calculateBuildButton.configure(text='''Calculate Build''')
		self.calculateBuildButton.configure(command=self.showBuildScreen)

	def showAddPlanterScreen(self):
		'''This class configures and populates the toplevel window.
		top is the toplevel containing window.'''
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'
			
		self.measurementType = tk.StringVar()
		self.measurementType.set(self.settings["general"]["defaultUnitOfMeasurement"])
		self.top = tk.Toplevel()
		self.top.focus_set()
		self.top.resizable(False, False)
		
		self.top.geometry("208x254+680+197")
		self.top.title("Add Planter")
		self.top.configure(background="#d9d9d9")
		self.top.configure(highlightbackground="#d9d9d9")
		self.top.configure(highlightcolor="black")

		self.dimensionsFrame = tk.LabelFrame(self.top)
		self.dimensionsFrame.place(relx=0.048, rely=0.039, relheight=0.925, relwidth=0.913)
		self.dimensionsFrame.configure(relief='groove')
		self.dimensionsFrame.configure(foreground="black")
		self.dimensionsFrame.configure(text='''Dimensions''')
		self.dimensionsFrame.configure(background="#d9d9d9")
		self.dimensionsFrame.configure(highlightbackground="#d9d9d9")
		self.dimensionsFrame.configure(highlightcolor="black")
		self.dimensionsFrame.configure(width=190)

		self.lengthEntry = tk.Entry(self.dimensionsFrame)
		self.lengthEntry.place(relx=0.526, rely=0.128, height=20, relwidth=0.337, bordermode='ignore')
		self.lengthEntry.configure(background="white")
		self.lengthEntry.configure(disabledforeground="#a3a3a3")
		self.lengthEntry.configure(font="TkFixedFont")
		self.lengthEntry.configure(foreground="#000000")
		self.lengthEntry.configure(highlightbackground="#d9d9d9")
		self.lengthEntry.configure(highlightcolor="black")
		self.lengthEntry.configure(insertbackground="black")
		self.lengthEntry.configure(selectbackground="#c4c4c4")
		self.lengthEntry.configure(selectforeground="black")

		self.widthEntry = tk.Entry(self.dimensionsFrame)
		self.widthEntry.place(relx=0.526, rely=0.255, height=20, relwidth=0.337, bordermode='ignore')
		self.widthEntry.configure(background="white")
		self.widthEntry.configure(disabledforeground="#a3a3a3")
		self.widthEntry.configure(font="TkFixedFont")
		self.widthEntry.configure(foreground="#000000")
		self.widthEntry.configure(highlightbackground="#d9d9d9")
		self.widthEntry.configure(highlightcolor="black")
		self.widthEntry.configure(insertbackground="black")
		self.widthEntry.configure(selectbackground="#c4c4c4")
		self.widthEntry.configure(selectforeground="black")

		self.heightEntry = tk.Entry(self.dimensionsFrame)
		self.heightEntry.place(relx=0.526, rely=0.383, height=20, relwidth=0.337, bordermode='ignore')
		self.heightEntry.configure(background="white")
		self.heightEntry.configure(disabledforeground="#a3a3a3")
		self.heightEntry.configure(font="TkFixedFont")
		self.heightEntry.configure(foreground="#000000")
		self.heightEntry.configure(highlightbackground="#d9d9d9")
		self.heightEntry.configure(highlightcolor="black")
		self.heightEntry.configure(insertbackground="black")
		self.heightEntry.configure(selectbackground="#c4c4c4")
		self.heightEntry.configure(selectforeground="black")

		self.lengthLabel = tk.Label(self.dimensionsFrame)
		self.lengthLabel.place(relx=0.105, rely=0.128, height=21, width=43, bordermode='ignore')
		self.lengthLabel.configure(activebackground="#f9f9f9")
		self.lengthLabel.configure(activeforeground="black")
		self.lengthLabel.configure(background="#d9d9d9")
		self.lengthLabel.configure(disabledforeground="#a3a3a3")
		self.lengthLabel.configure(foreground="#000000")
		self.lengthLabel.configure(highlightbackground="#d9d9d9")
		self.lengthLabel.configure(highlightcolor="black")
		self.lengthLabel.configure(text='''Length''')

		self.heightLabel = tk.Label(self.dimensionsFrame)
		self.heightLabel.place(relx=0.105, rely=0.383, height=21, width=42, bordermode='ignore')
		self.heightLabel.configure(activebackground="#f9f9f9")
		self.heightLabel.configure(activeforeground="black")
		self.heightLabel.configure(background="#d9d9d9")
		self.heightLabel.configure(disabledforeground="#a3a3a3")
		self.heightLabel.configure(foreground="#000000")
		self.heightLabel.configure(highlightbackground="#d9d9d9")
		self.heightLabel.configure(highlightcolor="black")
		self.heightLabel.configure(text='''Height''')

		self.widthLabel = tk.Label(self.dimensionsFrame)
		self.widthLabel.place(relx=0.105, rely=0.255, height=21, width=38, bordermode='ignore')
		self.widthLabel.configure(activebackground="#f9f9f9")
		self.widthLabel.configure(activeforeground="black")
		self.widthLabel.configure(background="#d9d9d9")
		self.widthLabel.configure(disabledforeground="#a3a3a3")
		self.widthLabel.configure(foreground="#000000")
		self.widthLabel.configure(highlightbackground="#d9d9d9")
		self.widthLabel.configure(highlightcolor="black")
		self.widthLabel.configure(text='''Width''')

		self.markupLabel = tk.Label(self.dimensionsFrame)
		self.markupLabel.place(relx=0.105, rely=0.511, height=21, width=60, bordermode='ignore')
		self.markupLabel.configure(activebackground="#f9f9f9")
		self.markupLabel.configure(activeforeground="black")
		self.markupLabel.configure(background="#d9d9d9")
		self.markupLabel.configure(disabledforeground="#a3a3a3")
		self.markupLabel.configure(foreground="#000000")
		self.markupLabel.configure(highlightbackground="#d9d9d9")
		self.markupLabel.configure(highlightcolor="black")
		self.markupLabel.configure(text='''Markup %''')

		self.markupEntry = tk.Entry(self.dimensionsFrame)
		self.markupEntry.place(relx=0.526, rely=0.511, height=20, relwidth=0.337, bordermode='ignore')
		self.markupEntry.configure(background="white")
		self.markupEntry.configure(disabledforeground="#a3a3a3")
		self.markupEntry.configure(font="TkFixedFont")
		self.markupEntry.configure(foreground="#000000")
		self.markupEntry.configure(highlightbackground="#d9d9d9")
		self.markupEntry.configure(highlightcolor="black")
		self.markupEntry.configure(insertbackground="black")
		self.markupEntry.configure(selectbackground="#c4c4c4")
		self.markupEntry.configure(selectforeground="black")
		self.markupEntry.insert(0, self.settings["general"]["markup"])

		self.cmRadioButton = tk.Radiobutton(self.dimensionsFrame)
		self.cmRadioButton.place(relx=0.053, rely=0.681, relheight=0.106, relwidth=0.237, bordermode='ignore')
		self.cmRadioButton.configure(activebackground="#ececec")
		self.cmRadioButton.configure(activeforeground="#000000")
		self.cmRadioButton.configure(background="#d9d9d9")
		self.cmRadioButton.configure(disabledforeground="#a3a3a3")
		self.cmRadioButton.configure(foreground="#000000")
		self.cmRadioButton.configure(highlightbackground="#d9d9d9")
		self.cmRadioButton.configure(highlightcolor="black")
		self.cmRadioButton.configure(justify='left')
		self.cmRadioButton.configure(text='''cm''')
		self.cmRadioButton.configure(value="cm")
		self.cmRadioButton.configure(variable=self.measurementType)

		self.inchRadioButton = tk.Radiobutton(self.dimensionsFrame)
		self.inchRadioButton.place(relx=0.316, rely=0.681, relheight=0.106, relwidth=0.326, bordermode='ignore')
		self.inchRadioButton.configure(activebackground="#ececec")
		self.inchRadioButton.configure(activeforeground="#000000")
		self.inchRadioButton.configure(background="#d9d9d9")
		self.inchRadioButton.configure(disabledforeground="#a3a3a3")
		self.inchRadioButton.configure(foreground="#000000")
		self.inchRadioButton.configure(highlightbackground="#d9d9d9")
		self.inchRadioButton.configure(highlightcolor="black")
		self.inchRadioButton.configure(justify='left')
		self.inchRadioButton.configure(text='''Inches''')
		self.inchRadioButton.configure(value="inches")
		self.inchRadioButton.configure(variable=self.measurementType)

		self.mmRadioButton = tk.Radiobutton(self.dimensionsFrame)
		self.mmRadioButton.place(relx=0.684, rely=0.681, relheight=0.106, relwidth=0.263, bordermode='ignore')
		self.mmRadioButton.configure(activebackground="#ececec")
		self.mmRadioButton.configure(activeforeground="#000000")
		self.mmRadioButton.configure(background="#d9d9d9")
		self.mmRadioButton.configure(disabledforeground="#a3a3a3")
		self.mmRadioButton.configure(foreground="#000000")
		self.mmRadioButton.configure(highlightbackground="#d9d9d9")
		self.mmRadioButton.configure(highlightcolor="black")
		self.mmRadioButton.configure(justify='left')
		self.mmRadioButton.configure(text='''mm''')
		self.mmRadioButton.configure(value="mm")
		self.mmRadioButton.configure(variable=self.measurementType)
		
		self.submitButton = tk.Button(self.dimensionsFrame)
		self.submitButton.place(relx=0.368, rely=0.851, height=24, width=49, bordermode='ignore')
		self.submitButton.configure(activebackground="#ececec")
		self.submitButton.configure(activeforeground="#000000")
		self.submitButton.configure(background="#d9d9d9")
		self.submitButton.configure(disabledforeground="#a3a3a3")
		self.submitButton.configure(foreground="#000000")
		self.submitButton.configure(highlightbackground="#d9d9d9")
		self.submitButton.configure(highlightcolor="black")
		self.submitButton.configure(pady="0")
		self.submitButton.configure(text='''Submit''')
		self.submitButton.configure(command=self.getAddPlanterEntries)
		
	def showEditPlanterScreen(self):
		def updatePlanter():
			length			= int(self.lengthEntry.get())
			width 			= int(self.widthEntry.get())
			height 			= int(self.heightEntry.get())
			markup 			= int(self.markupEntry.get())
			measurementType	= self.measurementType.get()
			
			if measurementType == "mm":
				height 	= int(height / 10)
				width 	= int(width / 10)
				length	= int(length / 10)
				
			elif measurementType == "inches":
				height 	= int(height * 2.54)
				width 	= int(width * 2.54)
				length	= int(length * 2.54)
			
			order.length			= length
			order.width 			= width
			order.height 			= height
			order.markup 			= markup
			order.measurementType	= measurementType
				
			self.updateListbox()
			self.top.destroy()
		
		'''This class configures and populates the toplevel window.
		top is the toplevel containing window.'''
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'
		
		try:
			orderId = self.orderListbox.curselection()[0]
			order = self.order[orderId]
		except IndexError:
			messagebox.showerror("Error", "Please select a planter to edit")
			return

		self.measurementType = tk.StringVar()
		self.measurementType.set(order.measurementType)
		
		self.top = tk.Toplevel()
		self.top.focus_set()
		
		self.top.geometry("208x254+680+197")
		self.top.title("Edit Planter")
		self.top.configure(background="#d9d9d9")
		self.top.configure(highlightbackground="#d9d9d9")
		self.top.configure(highlightcolor="black")
		self.top.resizable(False, False)

		self.dimensionsFrame = tk.LabelFrame(self.top)
		self.dimensionsFrame.place(relx=0.048, rely=0.039, relheight=0.925, relwidth=0.913)
		self.dimensionsFrame.configure(relief='groove')
		self.dimensionsFrame.configure(foreground="black")
		self.dimensionsFrame.configure(text='''Dimensions''')
		self.dimensionsFrame.configure(background="#d9d9d9")
		self.dimensionsFrame.configure(highlightbackground="#d9d9d9")
		self.dimensionsFrame.configure(highlightcolor="black")
		self.dimensionsFrame.configure(width=190)

		self.lengthEntry = tk.Entry(self.dimensionsFrame)
		self.lengthEntry.place(relx=0.526, rely=0.128, height=20, relwidth=0.337, bordermode='ignore')
		self.lengthEntry.configure(background="white")
		self.lengthEntry.configure(disabledforeground="#a3a3a3")
		self.lengthEntry.configure(font="TkFixedFont")
		self.lengthEntry.configure(foreground="#000000")
		self.lengthEntry.configure(highlightbackground="#d9d9d9")
		self.lengthEntry.configure(highlightcolor="black")
		self.lengthEntry.configure(insertbackground="black")
		self.lengthEntry.configure(selectbackground="#c4c4c4")
		self.lengthEntry.configure(selectforeground="black")
		self.lengthEntry.insert(0, order.length)

		self.widthEntry = tk.Entry(self.dimensionsFrame)
		self.widthEntry.place(relx=0.526, rely=0.255, height=20, relwidth=0.337, bordermode='ignore')
		self.widthEntry.configure(background="white")
		self.widthEntry.configure(disabledforeground="#a3a3a3")
		self.widthEntry.configure(font="TkFixedFont")
		self.widthEntry.configure(foreground="#000000")
		self.widthEntry.configure(highlightbackground="#d9d9d9")
		self.widthEntry.configure(highlightcolor="black")
		self.widthEntry.configure(insertbackground="black")
		self.widthEntry.configure(selectbackground="#c4c4c4")
		self.widthEntry.configure(selectforeground="black")
		self.widthEntry.insert(0, order.width)
		
		self.heightEntry = tk.Entry(self.dimensionsFrame)
		self.heightEntry.place(relx=0.526, rely=0.383, height=20, relwidth=0.337, bordermode='ignore')
		self.heightEntry.configure(background="white")
		self.heightEntry.configure(disabledforeground="#a3a3a3")
		self.heightEntry.configure(font="TkFixedFont")
		self.heightEntry.configure(foreground="#000000")
		self.heightEntry.configure(highlightbackground="#d9d9d9")
		self.heightEntry.configure(highlightcolor="black")
		self.heightEntry.configure(insertbackground="black")
		self.heightEntry.configure(selectbackground="#c4c4c4")
		self.heightEntry.configure(selectforeground="black")
		self.heightEntry.insert(0, order.height)

		self.lengthLabel = tk.Label(self.dimensionsFrame)
		self.lengthLabel.place(relx=0.105, rely=0.128, height=21, width=43, bordermode='ignore')
		self.lengthLabel.configure(activebackground="#f9f9f9")
		self.lengthLabel.configure(activeforeground="black")
		self.lengthLabel.configure(background="#d9d9d9")
		self.lengthLabel.configure(disabledforeground="#a3a3a3")
		self.lengthLabel.configure(foreground="#000000")
		self.lengthLabel.configure(highlightbackground="#d9d9d9")
		self.lengthLabel.configure(highlightcolor="black")
		self.lengthLabel.configure(text='''Length''')

		self.heightLabel = tk.Label(self.dimensionsFrame)
		self.heightLabel.place(relx=0.105, rely=0.383, height=21, width=42, bordermode='ignore')
		self.heightLabel.configure(activebackground="#f9f9f9")
		self.heightLabel.configure(activeforeground="black")
		self.heightLabel.configure(background="#d9d9d9")
		self.heightLabel.configure(disabledforeground="#a3a3a3")
		self.heightLabel.configure(foreground="#000000")
		self.heightLabel.configure(highlightbackground="#d9d9d9")
		self.heightLabel.configure(highlightcolor="black")
		self.heightLabel.configure(text='''Height''')

		self.widthLabel = tk.Label(self.dimensionsFrame)
		self.widthLabel.place(relx=0.105, rely=0.255, height=21, width=38, bordermode='ignore')
		self.widthLabel.configure(activebackground="#f9f9f9")
		self.widthLabel.configure(activeforeground="black")
		self.widthLabel.configure(background="#d9d9d9")
		self.widthLabel.configure(disabledforeground="#a3a3a3")
		self.widthLabel.configure(foreground="#000000")
		self.widthLabel.configure(highlightbackground="#d9d9d9")
		self.widthLabel.configure(highlightcolor="black")
		self.widthLabel.configure(text='''Width''')

		self.markupLabel = tk.Label(self.dimensionsFrame)
		self.markupLabel.place(relx=0.105, rely=0.511, height=21, width=60, bordermode='ignore')
		self.markupLabel.configure(activebackground="#f9f9f9")
		self.markupLabel.configure(activeforeground="black")
		self.markupLabel.configure(background="#d9d9d9")
		self.markupLabel.configure(disabledforeground="#a3a3a3")
		self.markupLabel.configure(foreground="#000000")
		self.markupLabel.configure(highlightbackground="#d9d9d9")
		self.markupLabel.configure(highlightcolor="black")
		self.markupLabel.configure(text='''Markup %''')

		self.markupEntry = tk.Entry(self.dimensionsFrame)
		self.markupEntry.place(relx=0.526, rely=0.511, height=20, relwidth=0.337, bordermode='ignore')
		self.markupEntry.configure(background="white")
		self.markupEntry.configure(disabledforeground="#a3a3a3")
		self.markupEntry.configure(font="TkFixedFont")
		self.markupEntry.configure(foreground="#000000")
		self.markupEntry.configure(highlightbackground="#d9d9d9")
		self.markupEntry.configure(highlightcolor="black")
		self.markupEntry.configure(insertbackground="black")
		self.markupEntry.configure(selectbackground="#c4c4c4")
		self.markupEntry.configure(selectforeground="black")
		self.markupEntry.insert(0, order.markup)

		self.cmRadioButton = tk.Radiobutton(self.dimensionsFrame)
		self.cmRadioButton.place(relx=0.053, rely=0.681, relheight=0.106, relwidth=0.237, bordermode='ignore')
		self.cmRadioButton.configure(activebackground="#ececec")
		self.cmRadioButton.configure(activeforeground="#000000")
		self.cmRadioButton.configure(background="#d9d9d9")
		self.cmRadioButton.configure(disabledforeground="#a3a3a3")
		self.cmRadioButton.configure(foreground="#000000")
		self.cmRadioButton.configure(highlightbackground="#d9d9d9")
		self.cmRadioButton.configure(highlightcolor="black")
		self.cmRadioButton.configure(justify='left')
		self.cmRadioButton.configure(text='''cm''')
		self.cmRadioButton.configure(value="cm")
		self.cmRadioButton.configure(variable=self.measurementType)

		self.inchRadioButton = tk.Radiobutton(self.dimensionsFrame)
		self.inchRadioButton.place(relx=0.316, rely=0.681, relheight=0.106, relwidth=0.326, bordermode='ignore')
		self.inchRadioButton.configure(activebackground="#ececec")
		self.inchRadioButton.configure(activeforeground="#000000")
		self.inchRadioButton.configure(background="#d9d9d9")
		self.inchRadioButton.configure(disabledforeground="#a3a3a3")
		self.inchRadioButton.configure(foreground="#000000")
		self.inchRadioButton.configure(highlightbackground="#d9d9d9")
		self.inchRadioButton.configure(highlightcolor="black")
		self.inchRadioButton.configure(justify='left')
		self.inchRadioButton.configure(text='''Inches''')
		self.inchRadioButton.configure(value="inches")
		self.inchRadioButton.configure(variable=self.measurementType)

		self.mmRadioButton = tk.Radiobutton(self.dimensionsFrame)
		self.mmRadioButton.place(relx=0.684, rely=0.681, relheight=0.106, relwidth=0.263, bordermode='ignore')
		self.mmRadioButton.configure(activebackground="#ececec")
		self.mmRadioButton.configure(activeforeground="#000000")
		self.mmRadioButton.configure(background="#d9d9d9")
		self.mmRadioButton.configure(disabledforeground="#a3a3a3")
		self.mmRadioButton.configure(foreground="#000000")
		self.mmRadioButton.configure(highlightbackground="#d9d9d9")
		self.mmRadioButton.configure(highlightcolor="black")
		self.mmRadioButton.configure(justify='left')
		self.mmRadioButton.configure(text='''mm''')
		self.mmRadioButton.configure(value="mm")
		self.mmRadioButton.configure(variable=self.measurementType)
		
		self.submitButton = tk.Button(self.dimensionsFrame)
		self.submitButton.place(relx=0.368, rely=0.851, height=24, width=49, bordermode='ignore')
		self.submitButton.configure(activebackground="#ececec")
		self.submitButton.configure(activeforeground="#000000")
		self.submitButton.configure(background="#d9d9d9")
		self.submitButton.configure(disabledforeground="#a3a3a3")
		self.submitButton.configure(foreground="#000000")
		self.submitButton.configure(highlightbackground="#d9d9d9")
		self.submitButton.configure(highlightcolor="black")
		self.submitButton.configure(pady="0")
		self.submitButton.configure(text='''Submit''')
		self.submitButton.configure(command=updatePlanter)
		
	def getAddPlanterEntries(self):
		try:
			height	= int(self.heightEntry.get())
			width	= int(self.widthEntry.get())
			length	= int(self.lengthEntry.get())
			markup  = int(self.markupEntry.get())
			measurementType = self.measurementType.get()
		except ValueError:
			messagebox.showerror("Error", "Inputs invalid! Please ensure all inputs are numbers")
			self.top.focus_set()
			return
		
		if measurementType == "mm":
			height 	= int(height / 10)
			width 	= int(width / 10)
			length	= int(length / 10)
			
		elif measurementType == "inches":
			height 	= int(height * 2.54)
			width 	= int(width * 2.54)
			length	= int(length * 2.54)
			
		
		self.order.append(planters.Planter((height, width, length), self.settings))
		
		self.top.destroy()
		self.updateListbox()
		
	def updateListbox(self):
		self.orderListbox.delete(0, 'end')
		for x in self.order:
			self.orderListbox.insert("end", ("%sx%sx%s" % (x.length, x.width, x.height)))

	def removePlanter(self):
		try:
			item = self.orderListbox.curselection()
			self.order.pop(item[0])
			self.orderListbox.delete(item[0])
		except IndexError:
			messagebox.showerror("Error", "Please select a planter you wish to remove")
			return

	def newOrder(self):
		self.orderListbox.delete(0, 'end')
		self.order = []

	def quit(self):
		import sys
		sys.exit()

	def showCostScreen(self):
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'
		
		if self.order == []:
			messagebox.showerror("Error", "Please add a planter")
			return
		
		self.top = tk.Toplevel()
		self.top.focus_set()
		self.top.geometry("513x273+569+175")
		self.top.title("Calculations")
		self.top.configure(background="#d9d9d9")
		self.top.resizable(False, False)

		self.calculationsFrame = tk.LabelFrame(self.top)
		self.calculationsFrame.place(relx=0.019, rely=0.0, relheight=0.971, relwidth=0.643)
		self.calculationsFrame.configure(relief='groove')
		self.calculationsFrame.configure(foreground="black")
		self.calculationsFrame.configure(text='''Calculations''')
		self.calculationsFrame.configure(background="#d9d9d9")
		self.calculationsFrame.configure(width=330)

		self.calculationsListbox = tk.Listbox(self.calculationsFrame)
		self.calculationsListbox.place(relx=0.03, rely=0.075, relheight=0.875, relwidth=0.921, bordermode='ignore')
		self.calculationsListbox.configure(background="white")
		self.calculationsListbox.configure(disabledforeground="#a3a3a3")
		self.calculationsListbox.configure(font="-family {Courier New} -size 10")
		self.calculationsListbox.configure(foreground="#000000")
		self.calculationsListbox.configure(width=304)

		self.functionsFrame = tk.LabelFrame(self.top)
		self.functionsFrame.place(relx=0.682, rely=0.0, relheight=0.641, relwidth=0.292)
		self.functionsFrame.configure(relief='groove')
		self.functionsFrame.configure(foreground="black")
		self.functionsFrame.configure(text='''Functions''')
		self.functionsFrame.configure(background="#d9d9d9")
		self.functionsFrame.configure(width=150)

		self.function1Button = tk.Button(self.functionsFrame)
		self.function1Button.place(relx=0.067, rely=0.114, height=24, width=127, bordermode='ignore')
		self.function1Button.configure(activebackground="#ececec")
		self.function1Button.configure(activeforeground="#000000")
		self.function1Button.configure(background="#d9d9d9")
		self.function1Button.configure(disabledforeground="#a3a3a3")
		self.function1Button.configure(foreground="#000000")
		self.function1Button.configure(highlightbackground="#d9d9d9")
		self.function1Button.configure(highlightcolor="black")
		self.function1Button.configure(pady="0")
		self.function1Button.configure(text='''Function 1''')
		self.function1Button.configure(width=127)
		self.function1Button.configure(state='disabled')

		self.function2Button = tk.Button(self.functionsFrame)
		self.function2Button.place(relx=0.067, rely=0.343, height=24, width=127, bordermode='ignore')
		self.function2Button.configure(activebackground="#ececec")
		self.function2Button.configure(activeforeground="#000000")
		self.function2Button.configure(background="#d9d9d9")
		self.function2Button.configure(disabledforeground="#a3a3a3")
		self.function2Button.configure(foreground="#000000")
		self.function2Button.configure(highlightbackground="#d9d9d9")
		self.function2Button.configure(highlightcolor="black")
		self.function2Button.configure(pady="0")
		self.function2Button.configure(state='disabled')
		self.function2Button.configure(text='''Function 2''')
		self.function2Button.configure(width=127)

		self.function3Button = tk.Button(self.functionsFrame)
		self.function3Button.place(relx=0.067, rely=0.571, height=24, width=127, bordermode='ignore')
		self.function3Button.configure(activebackground="#ececec")
		self.function3Button.configure(activeforeground="#000000")
		self.function3Button.configure(background="#d9d9d9")
		self.function3Button.configure(disabledforeground="#a3a3a3")
		self.function3Button.configure(foreground="#000000")
		self.function3Button.configure(highlightbackground="#d9d9d9")
		self.function3Button.configure(highlightcolor="black")
		self.function3Button.configure(pady="0")
		self.function3Button.configure(state='disabled')
		self.function3Button.configure(text='''Function 3''')
		self.function3Button.configure(width=127)

		self.function4Button = tk.Button(self.functionsFrame)
		self.function4Button.place(relx=0.067, rely=0.8, height=24, width=127, bordermode='ignore')
		self.function4Button.configure(activebackground="#ececec")
		self.function4Button.configure(activeforeground="#000000")
		self.function4Button.configure(background="#d9d9d9")
		self.function4Button.configure(disabledforeground="#a3a3a3")
		self.function4Button.configure(foreground="#000000")
		self.function4Button.configure(highlightbackground="#d9d9d9")
		self.function4Button.configure(highlightcolor="black")
		self.function4Button.configure(pady="0")
		self.function4Button.configure(state='disabled')
		self.function4Button.configure(text='''Function 4''')
		self.function4Button.configure(width=127)
				
		planksRequired 	= 0
		woodCost 		= 0
		screwCost 		= 0
		linerCost 		= 0
		totalCost 		= 0
		markupCost 		= 0
		profit			= 0
		
		for planter in self.order:		
			planksRequired 	+= planter.calcWoodNeeded()
			woodCost 		+= planter.calcWoodCostPlanks()
			screwCost 		+= planter.calcScrewCost()
			linerCost 		+= planter.calcLinerCost()
			totalCost 		+= planter.calcTotalCost()
			markupCost 		+= functions.calculateMarkup(planter.calcTotalCost(), planter.markup)
			profit			+= functions.calculateMarkup(planter.calcTotalCost(), planter.markup)-planter.calcTotalCost()
			
		self.calculationsListbox.insert("end", ("Cost of Wood - £%.2f" % (woodCost)))
		self.calculationsListbox.insert("end", ("Cost of Screws - £%.2f" % (screwCost)))
		self.calculationsListbox.insert("end", ("Cost of Liner - £%.2f" % (linerCost)))
		self.calculationsListbox.insert("end", ("Cost to Produce - £%.2f" % (totalCost)))
		self.calculationsListbox.insert("end", ("Sale Price - £%.2f" % (markupCost)))
		self.calculationsListbox.insert("end", ("Profit - £%.2f" % (profit)))
		planter.calcPlanksNeeded()

	def showBuildScreen(self):
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'
		
		if self.order == []:
			messagebox.showerror("Error", "Please add a planter")
			return
		
		self.top = tk.Toplevel()
		self.top.focus_set()
		self.top.geometry("513x273+569+175")
		self.top.title("Calculations")
		self.top.configure(background="#d9d9d9")
		self.top.resizable(False, False)

		self.calculationsFrame = tk.LabelFrame(self.top)
		self.calculationsFrame.place(relx=0.019, rely=0.0, relheight=0.971, relwidth=0.643)
		self.calculationsFrame.configure(relief='groove')
		self.calculationsFrame.configure(foreground="black")
		self.calculationsFrame.configure(text='''Calculations''')
		self.calculationsFrame.configure(background="#d9d9d9")
		self.calculationsFrame.configure(width=330)

		self.calculationsListbox = tk.Listbox(self.calculationsFrame)
		self.calculationsListbox.place(relx=0.03, rely=0.075, relheight=0.875, relwidth=0.921, bordermode='ignore')
		self.calculationsListbox.configure(background="white")
		self.calculationsListbox.configure(disabledforeground="#a3a3a3")
		self.calculationsListbox.configure(font="-family {Courier New} -size 10")
		self.calculationsListbox.configure(foreground="#000000")
		self.calculationsListbox.configure(width=304)

		self.functionsFrame = tk.LabelFrame(self.top)
		self.functionsFrame.place(relx=0.682, rely=0.0, relheight=0.641, relwidth=0.292)
		self.functionsFrame.configure(relief='groove')
		self.functionsFrame.configure(foreground="black")
		self.functionsFrame.configure(text='''Functions''')
		self.functionsFrame.configure(background="#d9d9d9")
		self.functionsFrame.configure(width=150)

		self.function1Button = tk.Button(self.functionsFrame)
		self.function1Button.place(relx=0.067, rely=0.114, height=24, width=127, bordermode='ignore')
		self.function1Button.configure(activebackground="#ececec")
		self.function1Button.configure(activeforeground="#000000")
		self.function1Button.configure(background="#d9d9d9")
		self.function1Button.configure(disabledforeground="#a3a3a3")
		self.function1Button.configure(foreground="#000000")
		self.function1Button.configure(highlightbackground="#d9d9d9")
		self.function1Button.configure(highlightcolor="black")
		self.function1Button.configure(pady="0")
		self.function1Button.configure(text='''Function 1''')
		self.function1Button.configure(width=127)
		self.function1Button.configure(state='disabled')

		self.function2Button = tk.Button(self.functionsFrame)
		self.function2Button.place(relx=0.067, rely=0.343, height=24, width=127, bordermode='ignore')
		self.function2Button.configure(activebackground="#ececec")
		self.function2Button.configure(activeforeground="#000000")
		self.function2Button.configure(background="#d9d9d9")
		self.function2Button.configure(disabledforeground="#a3a3a3")
		self.function2Button.configure(foreground="#000000")
		self.function2Button.configure(highlightbackground="#d9d9d9")
		self.function2Button.configure(highlightcolor="black")
		self.function2Button.configure(pady="0")
		self.function2Button.configure(state='disabled')
		self.function2Button.configure(text='''Function 2''')
		self.function2Button.configure(width=127)

		self.function3Button = tk.Button(self.functionsFrame)
		self.function3Button.place(relx=0.067, rely=0.571, height=24, width=127, bordermode='ignore')
		self.function3Button.configure(activebackground="#ececec")
		self.function3Button.configure(activeforeground="#000000")
		self.function3Button.configure(background="#d9d9d9")
		self.function3Button.configure(disabledforeground="#a3a3a3")
		self.function3Button.configure(foreground="#000000")
		self.function3Button.configure(highlightbackground="#d9d9d9")
		self.function3Button.configure(highlightcolor="black")
		self.function3Button.configure(pady="0")
		self.function3Button.configure(state='disabled')
		self.function3Button.configure(text='''Function 3''')
		self.function3Button.configure(width=127)

		self.function4Button = tk.Button(self.functionsFrame)
		self.function4Button.place(relx=0.067, rely=0.8, height=24, width=127, bordermode='ignore')
		self.function4Button.configure(activebackground="#ececec")
		self.function4Button.configure(activeforeground="#000000")
		self.function4Button.configure(background="#d9d9d9")
		self.function4Button.configure(disabledforeground="#a3a3a3")
		self.function4Button.configure(foreground="#000000")
		self.function4Button.configure(highlightbackground="#d9d9d9")
		self.function4Button.configure(highlightcolor="black")
		self.function4Button.configure(pady="0")
		self.function4Button.configure(state='disabled')
		self.function4Button.configure(text='''Function 4''')
		self.function4Button.configure(width=127)
		
		planksRequired 	= 0
		soilRequired	= 0
		planksToBuild	= {}
		
		for planter in self.order:
			planksRequired 	+= planter.calcWoodNeeded()
			soilRequired 	+= planter.calcSoilNeeded()
			planksNeeded 	= planter.calcPlanksNeeded()
			for x in planksNeeded:
				if x[1] in planksToBuild:
					planksToBuild[x[1]] += x[2]
				else:
					planksToBuild[x[1]] = x[2]
		
		self.calculationsListbox.insert("end", ("Planks Required - %s" % (planksRequired)))
		
		for x, y in planksToBuild.items():
			self.calculationsListbox.insert("end", ("%s - %s" % (x, y)))
		
		self.calculationsListbox.insert("end", ("Soil Required - %s litres" % (soilRequired)))
		
		
if __name__ == '__main__':
	vp_start_gui()





